#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace cinemaTicketManager.DataBase
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="cinemaTicket")]
	public partial class cinemaTicketManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertticket(ticket instance);
    partial void Updateticket(ticket instance);
    partial void Deleteticket(ticket instance);
    partial void Insertshowtime(showtime instance);
    partial void Updateshowtime(showtime instance);
    partial void Deleteshowtime(showtime instance);
    partial void Insertshowroom(showroom instance);
    partial void Updateshowroom(showroom instance);
    partial void Deleteshowroom(showroom instance);
    partial void Insertseat(seat instance);
    partial void Updateseat(seat instance);
    partial void Deleteseat(seat instance);
    partial void Insertfilm(film instance);
    partial void Updatefilm(film instance);
    partial void Deletefilm(film instance);
    partial void Insertcategory(category instance);
    partial void Updatecategory(category instance);
    partial void Deletecategory(category instance);
    partial void Insertcalendershow(calendershow instance);
    partial void Updatecalendershow(calendershow instance);
    partial void Deletecalendershow(calendershow instance);
    partial void Insertaccount(account instance);
    partial void Updateaccount(account instance);
    partial void Deleteaccount(account instance);
    #endregion
		
		public cinemaTicketManagerDataContext() : 
				base(global::cinemaTicketManager.Properties.Settings.Default.cinemaTicketConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public cinemaTicketManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public cinemaTicketManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public cinemaTicketManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public cinemaTicketManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<showTicket> showTickets
		{
			get
			{
				return this.GetTable<showTicket>();
			}
		}
		
		public System.Data.Linq.Table<showCalender> showCalenders
		{
			get
			{
				return this.GetTable<showCalender>();
			}
		}
		
		public System.Data.Linq.Table<ticket> tickets
		{
			get
			{
				return this.GetTable<ticket>();
			}
		}
		
		public System.Data.Linq.Table<showtime> showtimes
		{
			get
			{
				return this.GetTable<showtime>();
			}
		}
		
		public System.Data.Linq.Table<showroom> showrooms
		{
			get
			{
				return this.GetTable<showroom>();
			}
		}
		
		public System.Data.Linq.Table<seat> seats
		{
			get
			{
				return this.GetTable<seat>();
			}
		}
		
		public System.Data.Linq.Table<film> films
		{
			get
			{
				return this.GetTable<film>();
			}
		}
		
		public System.Data.Linq.Table<category> categories
		{
			get
			{
				return this.GetTable<category>();
			}
		}
		
		public System.Data.Linq.Table<calendershow> calendershows
		{
			get
			{
				return this.GetTable<calendershow>();
			}
		}
		
		public System.Data.Linq.Table<account> accounts
		{
			get
			{
				return this.GetTable<account>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertTicket")]
		public int insertTicket([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> createdBy, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(250)")] string buyer, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> createdDate, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> sale, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> seat, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> calender)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), createdBy, buyer, createdDate, sale, seat, calender);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.showTicket")]
	public partial class showTicket
	{
		
		private int _id;
		
		private string _buyer;
		
		private System.DateTime _createdDate;
		
		private double _totalPrice;
		
		private System.DateTime _showDate;
		
		private string _timeName;
		
		private int _timeBegin;
		
		private string _film;
		
		private string _room;
		
		private string _seatName;
		
		private string _createdName;
		
		private int _createdBy;
		
		public showTicket()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buyer", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string buyer
		{
			get
			{
				return this._buyer;
			}
			set
			{
				if ((this._buyer != value))
				{
					this._buyer = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="Date NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this._createdDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float NOT NULL")]
		public double totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this._totalPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showDate", DbType="Date NOT NULL")]
		public System.DateTime showDate
		{
			get
			{
				return this._showDate;
			}
			set
			{
				if ((this._showDate != value))
				{
					this._showDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string timeName
		{
			get
			{
				return this._timeName;
			}
			set
			{
				if ((this._timeName != value))
				{
					this._timeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeBegin", DbType="Int NOT NULL")]
		public int timeBegin
		{
			get
			{
				return this._timeBegin;
			}
			set
			{
				if ((this._timeBegin != value))
				{
					this._timeBegin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string film
		{
			get
			{
				return this._film;
			}
			set
			{
				if ((this._film != value))
				{
					this._film = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string room
		{
			get
			{
				return this._room;
			}
			set
			{
				if ((this._room != value))
				{
					this._room = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seatName", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string seatName
		{
			get
			{
				return this._seatName;
			}
			set
			{
				if ((this._seatName != value))
				{
					this._seatName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string createdName
		{
			get
			{
				return this._createdName;
			}
			set
			{
				if ((this._createdName != value))
				{
					this._createdName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdBy", DbType="Int NOT NULL")]
		public int createdBy
		{
			get
			{
				return this._createdBy;
			}
			set
			{
				if ((this._createdBy != value))
				{
					this._createdBy = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.showCalender")]
	public partial class showCalender
	{
		
		private int _id;
		
		private string _film;
		
		private string _timeName;
		
		private int _timeBegin;
		
		private string _room;
		
		private System.DateTime _showDate;
		
		private double _extraPrice;
		
		public showCalender()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string film
		{
			get
			{
				return this._film;
			}
			set
			{
				if ((this._film != value))
				{
					this._film = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string timeName
		{
			get
			{
				return this._timeName;
			}
			set
			{
				if ((this._timeName != value))
				{
					this._timeName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeBegin", DbType="Int NOT NULL")]
		public int timeBegin
		{
			get
			{
				return this._timeBegin;
			}
			set
			{
				if ((this._timeBegin != value))
				{
					this._timeBegin = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_room", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string room
		{
			get
			{
				return this._room;
			}
			set
			{
				if ((this._room != value))
				{
					this._room = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showDate", DbType="Date NOT NULL")]
		public System.DateTime showDate
		{
			get
			{
				return this._showDate;
			}
			set
			{
				if ((this._showDate != value))
				{
					this._showDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extraPrice", DbType="Float NOT NULL")]
		public double extraPrice
		{
			get
			{
				return this._extraPrice;
			}
			set
			{
				if ((this._extraPrice != value))
				{
					this._extraPrice = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ticket")]
	public partial class ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _createdBy;
		
		private string _buyer;
		
		private System.DateTime _createdDate;
		
		private double _sale;
		
		private int _seat;
		
		private int _calenderShow;
		
		private double _totalPrice;
		
		private EntityRef<seat> _seat1;
		
		private EntityRef<calendershow> _calendershow1;
		
		private EntityRef<account> _account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncreatedByChanging(int value);
    partial void OncreatedByChanged();
    partial void OnbuyerChanging(string value);
    partial void OnbuyerChanged();
    partial void OncreatedDateChanging(System.DateTime value);
    partial void OncreatedDateChanged();
    partial void OnsaleChanging(double value);
    partial void OnsaleChanged();
    partial void OnseatChanging(int value);
    partial void OnseatChanged();
    partial void OncalenderShowChanging(int value);
    partial void OncalenderShowChanged();
    partial void OntotalPriceChanging(double value);
    partial void OntotalPriceChanged();
    #endregion
		
		public ticket()
		{
			this._seat1 = default(EntityRef<seat>);
			this._calendershow1 = default(EntityRef<calendershow>);
			this._account = default(EntityRef<account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdBy", DbType="Int NOT NULL")]
		public int createdBy
		{
			get
			{
				return this._createdBy;
			}
			set
			{
				if ((this._createdBy != value))
				{
					if (this._account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatedByChanging(value);
					this.SendPropertyChanging();
					this._createdBy = value;
					this.SendPropertyChanged("createdBy");
					this.OncreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buyer", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string buyer
		{
			get
			{
				return this._buyer;
			}
			set
			{
				if ((this._buyer != value))
				{
					this.OnbuyerChanging(value);
					this.SendPropertyChanging();
					this._buyer = value;
					this.SendPropertyChanged("buyer");
					this.OnbuyerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createdDate", DbType="Date NOT NULL")]
		public System.DateTime createdDate
		{
			get
			{
				return this._createdDate;
			}
			set
			{
				if ((this._createdDate != value))
				{
					this.OncreatedDateChanging(value);
					this.SendPropertyChanging();
					this._createdDate = value;
					this.SendPropertyChanged("createdDate");
					this.OncreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sale", DbType="Float NOT NULL")]
		public double sale
		{
			get
			{
				return this._sale;
			}
			set
			{
				if ((this._sale != value))
				{
					this.OnsaleChanging(value);
					this.SendPropertyChanging();
					this._sale = value;
					this.SendPropertyChanged("sale");
					this.OnsaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat", DbType="Int NOT NULL")]
		public int seat
		{
			get
			{
				return this._seat;
			}
			set
			{
				if ((this._seat != value))
				{
					if (this._seat1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnseatChanging(value);
					this.SendPropertyChanging();
					this._seat = value;
					this.SendPropertyChanged("seat");
					this.OnseatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_calenderShow", DbType="Int NOT NULL")]
		public int calenderShow
		{
			get
			{
				return this._calenderShow;
			}
			set
			{
				if ((this._calenderShow != value))
				{
					if (this._calendershow1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncalenderShowChanging(value);
					this.SendPropertyChanging();
					this._calenderShow = value;
					this.SendPropertyChanged("calenderShow");
					this.OncalenderShowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Float NOT NULL")]
		public double totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this.OntotalPriceChanging(value);
					this.SendPropertyChanging();
					this._totalPrice = value;
					this.SendPropertyChanged("totalPrice");
					this.OntotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="seat_ticket", Storage="_seat1", ThisKey="seat", OtherKey="id", IsForeignKey=true)]
		public seat seat1
		{
			get
			{
				return this._seat1.Entity;
			}
			set
			{
				seat previousValue = this._seat1.Entity;
				if (((previousValue != value) 
							|| (this._seat1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._seat1.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._seat1.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._seat = value.id;
					}
					else
					{
						this._seat = default(int);
					}
					this.SendPropertyChanged("seat1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="calendershow_ticket", Storage="_calendershow1", ThisKey="calenderShow", OtherKey="id", IsForeignKey=true)]
		public calendershow calendershow1
		{
			get
			{
				return this._calendershow1.Entity;
			}
			set
			{
				calendershow previousValue = this._calendershow1.Entity;
				if (((previousValue != value) 
							|| (this._calendershow1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._calendershow1.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._calendershow1.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._calenderShow = value.id;
					}
					else
					{
						this._calenderShow = default(int);
					}
					this.SendPropertyChanged("calendershow1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_ticket", Storage="_account", ThisKey="createdBy", OtherKey="id", IsForeignKey=true)]
		public account account
		{
			get
			{
				return this._account.Entity;
			}
			set
			{
				account previousValue = this._account.Entity;
				if (((previousValue != value) 
							|| (this._account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._account.Entity = null;
						previousValue.tickets.Remove(this);
					}
					this._account.Entity = value;
					if ((value != null))
					{
						value.tickets.Add(this);
						this._createdBy = value.id;
					}
					else
					{
						this._createdBy = default(int);
					}
					this.SendPropertyChanged("account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.showtime")]
	public partial class showtime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _timeName;
		
		private int _timeBegin;
		
		private int _timeEnd;
		
		private EntitySet<calendershow> _calendershows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OntimeNameChanging(string value);
    partial void OntimeNameChanged();
    partial void OntimeBeginChanging(int value);
    partial void OntimeBeginChanged();
    partial void OntimeEndChanging(int value);
    partial void OntimeEndChanged();
    #endregion
		
		public showtime()
		{
			this._calendershows = new EntitySet<calendershow>(new Action<calendershow>(this.attach_calendershows), new Action<calendershow>(this.detach_calendershows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string timeName
		{
			get
			{
				return this._timeName;
			}
			set
			{
				if ((this._timeName != value))
				{
					this.OntimeNameChanging(value);
					this.SendPropertyChanging();
					this._timeName = value;
					this.SendPropertyChanged("timeName");
					this.OntimeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeBegin", DbType="Int NOT NULL")]
		public int timeBegin
		{
			get
			{
				return this._timeBegin;
			}
			set
			{
				if ((this._timeBegin != value))
				{
					this.OntimeBeginChanging(value);
					this.SendPropertyChanging();
					this._timeBegin = value;
					this.SendPropertyChanged("timeBegin");
					this.OntimeBeginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeEnd", DbType="Int NOT NULL")]
		public int timeEnd
		{
			get
			{
				return this._timeEnd;
			}
			set
			{
				if ((this._timeEnd != value))
				{
					this.OntimeEndChanging(value);
					this.SendPropertyChanging();
					this._timeEnd = value;
					this.SendPropertyChanged("timeEnd");
					this.OntimeEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="showtime_calendershow", Storage="_calendershows", ThisKey="id", OtherKey="showTime")]
		public EntitySet<calendershow> calendershows
		{
			get
			{
				return this._calendershows;
			}
			set
			{
				this._calendershows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_calendershows(calendershow entity)
		{
			this.SendPropertyChanging();
			entity.showtime1 = this;
		}
		
		private void detach_calendershows(calendershow entity)
		{
			this.SendPropertyChanging();
			entity.showtime1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.showroom")]
	public partial class showroom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _roomName;
		
		private bool _status;
		
		private EntitySet<calendershow> _calendershows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnroomNameChanging(string value);
    partial void OnroomNameChanged();
    partial void OnstatusChanging(bool value);
    partial void OnstatusChanged();
    #endregion
		
		public showroom()
		{
			this._calendershows = new EntitySet<calendershow>(new Action<calendershow>(this.attach_calendershows), new Action<calendershow>(this.detach_calendershows));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_roomName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string roomName
		{
			get
			{
				return this._roomName;
			}
			set
			{
				if ((this._roomName != value))
				{
					this.OnroomNameChanging(value);
					this.SendPropertyChanging();
					this._roomName = value;
					this.SendPropertyChanged("roomName");
					this.OnroomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="Bit NOT NULL")]
		public bool status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="showroom_calendershow", Storage="_calendershows", ThisKey="id", OtherKey="showRoom")]
		public EntitySet<calendershow> calendershows
		{
			get
			{
				return this._calendershows;
			}
			set
			{
				this._calendershows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_calendershows(calendershow entity)
		{
			this.SendPropertyChanging();
			entity.showroom1 = this;
		}
		
		private void detach_calendershows(calendershow entity)
		{
			this.SendPropertyChanging();
			entity.showroom1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.seat")]
	public partial class seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _seatName;
		
		private double _price;
		
		private bool _type;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnseatNameChanging(string value);
    partial void OnseatNameChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OntypeChanging(bool value);
    partial void OntypeChanged();
    #endregion
		
		public seat()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seatName", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string seatName
		{
			get
			{
				return this._seatName;
			}
			set
			{
				if ((this._seatName != value))
				{
					this.OnseatNameChanging(value);
					this.SendPropertyChanging();
					this._seatName = value;
					this.SendPropertyChanged("seatName");
					this.OnseatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Bit NOT NULL")]
		public bool type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="seat_ticket", Storage="_tickets", ThisKey="id", OtherKey="seat")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.seat1 = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.seat1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.film")]
	public partial class film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _filmName;
		
		private string _image;
		
		private int _time;
		
		private string _director;
		
		private string _casts;
		
		private System.DateTime _ariDate;
		
		private int _numDateShow;
		
		private string _content;
		
		private int _catId;
		
		private EntitySet<calendershow> _calendershows;
		
		private EntityRef<category> _category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfilmNameChanging(string value);
    partial void OnfilmNameChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OntimeChanging(int value);
    partial void OntimeChanged();
    partial void OndirectorChanging(string value);
    partial void OndirectorChanged();
    partial void OncastsChanging(string value);
    partial void OncastsChanged();
    partial void OnariDateChanging(System.DateTime value);
    partial void OnariDateChanged();
    partial void OnnumDateShowChanging(int value);
    partial void OnnumDateShowChanged();
    partial void OncontentChanging(string value);
    partial void OncontentChanged();
    partial void OncatIdChanging(int value);
    partial void OncatIdChanged();
    #endregion
		
		public film()
		{
			this._calendershows = new EntitySet<calendershow>(new Action<calendershow>(this.attach_calendershows), new Action<calendershow>(this.detach_calendershows));
			this._category = default(EntityRef<category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filmName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string filmName
		{
			get
			{
				return this._filmName;
			}
			set
			{
				if ((this._filmName != value))
				{
					this.OnfilmNameChanging(value);
					this.SendPropertyChanging();
					this._filmName = value;
					this.SendPropertyChanged("filmName");
					this.OnfilmNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="Int NOT NULL")]
		public int time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_director", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string director
		{
			get
			{
				return this._director;
			}
			set
			{
				if ((this._director != value))
				{
					this.OndirectorChanging(value);
					this.SendPropertyChanging();
					this._director = value;
					this.SendPropertyChanged("director");
					this.OndirectorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_casts", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string casts
		{
			get
			{
				return this._casts;
			}
			set
			{
				if ((this._casts != value))
				{
					this.OncastsChanging(value);
					this.SendPropertyChanging();
					this._casts = value;
					this.SendPropertyChanged("casts");
					this.OncastsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ariDate", DbType="Date NOT NULL")]
		public System.DateTime ariDate
		{
			get
			{
				return this._ariDate;
			}
			set
			{
				if ((this._ariDate != value))
				{
					this.OnariDateChanging(value);
					this.SendPropertyChanging();
					this._ariDate = value;
					this.SendPropertyChanged("ariDate");
					this.OnariDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numDateShow", DbType="Int NOT NULL")]
		public int numDateShow
		{
			get
			{
				return this._numDateShow;
			}
			set
			{
				if ((this._numDateShow != value))
				{
					this.OnnumDateShowChanging(value);
					this.SendPropertyChanging();
					this._numDateShow = value;
					this.SendPropertyChanged("numDateShow");
					this.OnnumDateShowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_content", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string content
		{
			get
			{
				return this._content;
			}
			set
			{
				if ((this._content != value))
				{
					this.OncontentChanging(value);
					this.SendPropertyChanging();
					this._content = value;
					this.SendPropertyChanged("content");
					this.OncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catId", DbType="Int NOT NULL")]
		public int catId
		{
			get
			{
				return this._catId;
			}
			set
			{
				if ((this._catId != value))
				{
					if (this._category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatIdChanging(value);
					this.SendPropertyChanging();
					this._catId = value;
					this.SendPropertyChanged("catId");
					this.OncatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_calendershow", Storage="_calendershows", ThisKey="id", OtherKey="film")]
		public EntitySet<calendershow> calendershows
		{
			get
			{
				return this._calendershows;
			}
			set
			{
				this._calendershows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_film", Storage="_category", ThisKey="catId", OtherKey="id", IsForeignKey=true)]
		public category category
		{
			get
			{
				return this._category.Entity;
			}
			set
			{
				category previousValue = this._category.Entity;
				if (((previousValue != value) 
							|| (this._category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._category.Entity = null;
						previousValue.films.Remove(this);
					}
					this._category.Entity = value;
					if ((value != null))
					{
						value.films.Add(this);
						this._catId = value.id;
					}
					else
					{
						this._catId = default(int);
					}
					this.SendPropertyChanged("category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_calendershows(calendershow entity)
		{
			this.SendPropertyChanging();
			entity.film1 = this;
		}
		
		private void detach_calendershows(calendershow entity)
		{
			this.SendPropertyChanging();
			entity.film1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.category")]
	public partial class category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _catName;
		
		private EntitySet<film> _films;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncatNameChanging(string value);
    partial void OncatNameChanged();
    #endregion
		
		public category()
		{
			this._films = new EntitySet<film>(new Action<film>(this.attach_films), new Action<film>(this.detach_films));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string catName
		{
			get
			{
				return this._catName;
			}
			set
			{
				if ((this._catName != value))
				{
					this.OncatNameChanging(value);
					this.SendPropertyChanging();
					this._catName = value;
					this.SendPropertyChanged("catName");
					this.OncatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="category_film", Storage="_films", ThisKey="id", OtherKey="catId")]
		public EntitySet<film> films
		{
			get
			{
				return this._films;
			}
			set
			{
				this._films.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_films(film entity)
		{
			this.SendPropertyChanging();
			entity.category = this;
		}
		
		private void detach_films(film entity)
		{
			this.SendPropertyChanging();
			entity.category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.calendershow")]
	public partial class calendershow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _film;
		
		private int _showRoom;
		
		private int _showTime;
		
		private System.DateTime _showDate;
		
		private double _extraPrice;
		
		private EntitySet<ticket> _tickets;
		
		private EntityRef<showroom> _showroom1;
		
		private EntityRef<showtime> _showtime1;
		
		private EntityRef<film> _film1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfilmChanging(int value);
    partial void OnfilmChanged();
    partial void OnshowRoomChanging(int value);
    partial void OnshowRoomChanged();
    partial void OnshowTimeChanging(int value);
    partial void OnshowTimeChanged();
    partial void OnshowDateChanging(System.DateTime value);
    partial void OnshowDateChanged();
    partial void OnextraPriceChanging(double value);
    partial void OnextraPriceChanged();
    #endregion
		
		public calendershow()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			this._showroom1 = default(EntityRef<showroom>);
			this._showtime1 = default(EntityRef<showtime>);
			this._film1 = default(EntityRef<film>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_film", DbType="Int NOT NULL")]
		public int film
		{
			get
			{
				return this._film;
			}
			set
			{
				if ((this._film != value))
				{
					if (this._film1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfilmChanging(value);
					this.SendPropertyChanging();
					this._film = value;
					this.SendPropertyChanged("film");
					this.OnfilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showRoom", DbType="Int NOT NULL")]
		public int showRoom
		{
			get
			{
				return this._showRoom;
			}
			set
			{
				if ((this._showRoom != value))
				{
					if (this._showroom1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnshowRoomChanging(value);
					this.SendPropertyChanging();
					this._showRoom = value;
					this.SendPropertyChanged("showRoom");
					this.OnshowRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showTime", DbType="Int NOT NULL")]
		public int showTime
		{
			get
			{
				return this._showTime;
			}
			set
			{
				if ((this._showTime != value))
				{
					if (this._showtime1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnshowTimeChanging(value);
					this.SendPropertyChanging();
					this._showTime = value;
					this.SendPropertyChanged("showTime");
					this.OnshowTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showDate", DbType="Date NOT NULL")]
		public System.DateTime showDate
		{
			get
			{
				return this._showDate;
			}
			set
			{
				if ((this._showDate != value))
				{
					this.OnshowDateChanging(value);
					this.SendPropertyChanging();
					this._showDate = value;
					this.SendPropertyChanged("showDate");
					this.OnshowDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_extraPrice", DbType="Float NOT NULL")]
		public double extraPrice
		{
			get
			{
				return this._extraPrice;
			}
			set
			{
				if ((this._extraPrice != value))
				{
					this.OnextraPriceChanging(value);
					this.SendPropertyChanging();
					this._extraPrice = value;
					this.SendPropertyChanged("extraPrice");
					this.OnextraPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="calendershow_ticket", Storage="_tickets", ThisKey="id", OtherKey="calenderShow")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="showroom_calendershow", Storage="_showroom1", ThisKey="showRoom", OtherKey="id", IsForeignKey=true)]
		public showroom showroom1
		{
			get
			{
				return this._showroom1.Entity;
			}
			set
			{
				showroom previousValue = this._showroom1.Entity;
				if (((previousValue != value) 
							|| (this._showroom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._showroom1.Entity = null;
						previousValue.calendershows.Remove(this);
					}
					this._showroom1.Entity = value;
					if ((value != null))
					{
						value.calendershows.Add(this);
						this._showRoom = value.id;
					}
					else
					{
						this._showRoom = default(int);
					}
					this.SendPropertyChanged("showroom1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="showtime_calendershow", Storage="_showtime1", ThisKey="showTime", OtherKey="id", IsForeignKey=true)]
		public showtime showtime1
		{
			get
			{
				return this._showtime1.Entity;
			}
			set
			{
				showtime previousValue = this._showtime1.Entity;
				if (((previousValue != value) 
							|| (this._showtime1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._showtime1.Entity = null;
						previousValue.calendershows.Remove(this);
					}
					this._showtime1.Entity = value;
					if ((value != null))
					{
						value.calendershows.Add(this);
						this._showTime = value.id;
					}
					else
					{
						this._showTime = default(int);
					}
					this.SendPropertyChanged("showtime1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="film_calendershow", Storage="_film1", ThisKey="film", OtherKey="id", IsForeignKey=true)]
		public film film1
		{
			get
			{
				return this._film1.Entity;
			}
			set
			{
				film previousValue = this._film1.Entity;
				if (((previousValue != value) 
							|| (this._film1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._film1.Entity = null;
						previousValue.calendershows.Remove(this);
					}
					this._film1.Entity = value;
					if ((value != null))
					{
						value.calendershows.Add(this);
						this._film = value.id;
					}
					else
					{
						this._film = default(int);
					}
					this.SendPropertyChanged("film1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.calendershow1 = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.calendershow1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.account")]
	public partial class account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private System.DateTime _dob;
		
		private string _phone;
		
		private string _email;
		
		private string _address;
		
		private string _userName;
		
		private string _password;
		
		private System.Nullable<bool> _role;
		
		private EntitySet<ticket> _tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndobChanging(System.DateTime value);
    partial void OndobChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnuserNameChanging(string value);
    partial void OnuserNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnroleChanging(System.Nullable<bool> value);
    partial void OnroleChanged();
    #endregion
		
		public account()
		{
			this._tickets = new EntitySet<ticket>(new Action<ticket>(this.attach_tickets), new Action<ticket>(this.detach_tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date NOT NULL")]
		public System.DateTime dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userName", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string userName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if ((this._userName != value))
				{
					this.OnuserNameChanging(value);
					this.SendPropertyChanging();
					this._userName = value;
					this.SendPropertyChanged("userName");
					this.OnuserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="Bit")]
		public System.Nullable<bool> role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="account_ticket", Storage="_tickets", ThisKey="id", OtherKey="createdBy")]
		public EntitySet<ticket> tickets
		{
			get
			{
				return this._tickets;
			}
			set
			{
				this._tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.account = this;
		}
		
		private void detach_tickets(ticket entity)
		{
			this.SendPropertyChanging();
			entity.account = null;
		}
	}
}
#pragma warning restore 1591
